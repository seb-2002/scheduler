// given the days arrays as a piece of state and a particular day as a
// query, return the appointments data for that day
const generateAppointmentData = (state, day) => {
  // makes an array of the names of the days in state to check
  // against
  const days = state.days.map((day) => day.name);

  // verifies that there is days data in state and that there
  // is date for the selected day
  if (state.days.length > 0 && days.includes(day)) {
    const selectedAppointments = state.days
      .filter((obj) => obj.name === day)
      .map((obj) => obj.appointments)[0]
      .map((id) => state.appointments[id]);
    if (selectedAppointments[0]) {
      return selectedAppointments;
    }
    return [];
  }
  return [];
};

const getInterviewersForDay = (state, day) => {
  // makes an array of the names of the days in state to check
  // against
  const days = state.days.map((day) => day.name);

  // verifies that there is days data in state and that there
  // is data for the selected day
  if (state.days.length > 0 && days.includes(day)) {
    const selectedInterviewers = state.days
      .filter((obj) => obj.name === day)
      .map((obj) => obj.interviewers)[0]
      .map((id) => state.interviewers[id]);
    if (selectedInterviewers[0]) {
      return selectedInterviewers;
    }
    return [];
  }
  return [];
};

// extends generateAppointmentData, appending the interviewer data
// instead of the interviewer id
const addInterviewerData = (state, appointmentsArray) => {
  return appointmentsArray.map((appointment) => {
    if (appointment.interview && appointment.interview.interviewer) {
      const interviewerId = appointment.interview.interviewer;
      const interviewer = state.interviewers[interviewerId];
      return {
        ...appointment,
        interview: { ...appointment.interview, interviewer },
      };
    } else {
      return { ...appointment };
    }
  });
};

// return an interview object with the interviewer information
// when passed the state and the interview object
// ppopulating the array generated by generateAppointmentData
const getInterview = (state, interviewObj) => {
  if (interviewObj && interviewObj.interviewer) {
    if (state.interviewers[interviewObj.interviewer]) {
      const interviewerId = interviewObj.interviewer;
      const interviewer = state.interviewers[interviewerId];
      return { ...interviewObj, interviewer };
    } else {
      return { ...interviewObj };
    }
  }
  return null;
};

// called in App.js to render the appointments components from the API
const getAppointmentsForDay = (state, day) => {
  const appointmentData = generateAppointmentData(state, day);
  return addInterviewerData(state, appointmentData);
};

export {
  getAppointmentsForDay,
  addInterviewerData,
  generateAppointmentData,
  getInterview,
  getInterviewersForDay,
};
